git init para inicializar uma pasta git

git status para verificar se o local está atualizado ou não

git add "<nome_do_arquivo>" para adicionar um arquivo para o controle de versão

git add . para adicionar todos arquivos pendentes para o controle de versão

git commit -m "<mensagem_do_commit>" para preparar os arquivos para envio

caso não tenha conta vinculada ainda, irá aparecer para configurar nome e email

email -> git config --global user.email "<email>"

nome -> git config --global user.nome "<nome>"

git remote add origin "<nome_do_repositorio>" vincula o repositório que os arquivos serão enviados com a pasta

git push --set--upstream origin <nome_da_branch> define a branch que receberá o push 

git reflog para verificar o histórico de atualizações (a versão mais atual é a do topo)(o código em amarelo na esquerda de cada linha é o id de cada versão, isso será importante para o próximo comando)


git reset --hard <id_da_versão> para tornar qualquer versão que você já teve para a versão atual do código (consultar antes de fazer isso!!!)

git branch mostra quais são as branchs disponíveis no momento (a branch marcada com '*' e verde é a que está sendo usadqa no momento)

git branch <nome_da_nova_branch> cria uma nova branch para ser utilizada

git checkout <nome_da_branch> muda entre as branchs

caso você queira unir um código novo com uma outra branch. Vamos maginar que você está na brach staging, e você quer unir o código com a branch principal, que nesse caso é a branch master.
Primeiramente, você entra na branch que vai estar -> RECEBENDO <- as atualizações, que neste caso é a branch master. Nós utilizamos o comando para entrar nessa branch, que você já viu. Com isso, nós vamos mergear, ou seja, unir os códigos usando o comando:

git merge <nome_da_branch_que_você_está_puxando>

Nós queremos puxar da branch staging para a branch master, então escrevemos o seguinte comando quando nós estivermos na branch master:

git merge staging

Após isso, nós damos um git push para atualizar o código, e ele será mergido com sucesso.

git pull puxa todas as atualizações realizadas em uma branch para sua máquina, deixando tudo atualizado

Passo a passo de como não fuder o sistema:
1. Primeiro passo: vá para a branch principal e de git pull
2. Criar uma nova branch com base na branch principal. Para fazer isso em um só comando:
git checkout -b <nome_da_nova_branch> <nome_da_branch_base>
3. Realizar as alterações na branch nova e adicionar o novo código ao sistema de versão (git add e git commit)
4. Voltar para a branch principal e realizar um git pull para o código não ficar desatualizado (e fuder o sistema no processo)
5. Com todos esses passos feitos -> CORRETAMENTE <-, agora pode dar um git merge com a nova branch

E com isso eu espero que sejam todos os passos para não perder seu emprego

As vezes, você não vai poder bota seu código novo diretamente na branch principal, e só vai poder colocar seu código se ele for aprovado por algum outro programador. Neste caso, você precisa fazer um pull request, para que o programador aprove seu código, antes que possa ser incluido no código principal.







