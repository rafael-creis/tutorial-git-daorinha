git init para inicializar uma pasta git

git status para verificar se o local est√° atualizado ou n√£o

git add "<nome_do_arquivo>" para adicionar um arquivo para o controle de vers√£o

git add . para adicionar todos arquivos pendentes para o controle de vers√£o

git commit -m "<mensagem_do_commit>" para preparar os arquivos para envio

caso n√£o tenha conta vinculada ainda, ir√° aparecer para configurar nome e email

email -> git config --global user.email "<email>"

nome -> git config --global user.nome "<nome>"

git remote add origin "<nome_do_repositorio>" vincula o reposit√≥rio que os arquivos ser√£o enviados com a pasta

git push --set--upstream origin <nome_da_branch> define a branch que receber√° o push 

git reflog para verificar o hist√≥rico de atualiza√ß√µes (a vers√£o mais atual √© a do topo)(o c√≥digo em amarelo na esquerda de cada linha √© o id de cada vers√£o, isso ser√° importante para o pr√≥ximo comando)


git reset --hard <id_da_vers√£o> para tornar qualquer vers√£o que voc√™ j√° teve para a vers√£o atual do c√≥digo (consultar antes de fazer isso!!!)

git branch mostra quais s√£o as branchs dispon√≠veis no momento (a branch marcada com '*' e verde √© a que est√° sendo usadqa no momento)

git branch <nome_da_nova_branch> cria uma nova branch para ser utilizada

git checkout <nome_da_branch> muda entre as branchs

caso voc√™ queira unir um c√≥digo novo com uma outra branch. Vamos maginar que voc√™ est√° na brach staging, e voc√™ quer unir o c√≥digo com a branch principal, que nesse caso √© a branch master.
Primeiramente, voc√™ entra na branch que vai estar -> RECEBENDO <- as atualiza√ß√µes, que neste caso √© a branch master. N√≥s utilizamos o comando para entrar nessa branch, que voc√™ j√° viu. Com isso, n√≥s vamos mergear, ou seja, unir os c√≥digos usando o comando:

git merge <nome_da_branch_que_voc√™_est√°_puxando>

N√≥s queremos puxar da branch staging para a branch master, ent√£o escrevemos o seguinte comando quando n√≥s estivermos na branch master:

git merge staging

Ap√≥s isso, n√≥s damos um git push para atualizar o c√≥digo, e ele ser√° mergido com sucesso.

git pull puxa todas as atualiza√ß√µes realizadas em uma branch para sua m√°quina, deixando tudo atualizado

Passo a passo de como n√£o fuder o sistema:
1. Primeiro passo: v√° para a branch principal e de git pull
2. Criar uma nova branch com base na branch principal. Para fazer isso em um s√≥ comando:
git checkout -b <nome_da_nova_branch> <nome_da_branch_base>
3. Realizar as altera√ß√µes na branch nova e adicionar o novo c√≥digo ao sistema de vers√£o (git add e git commit)
4. Voltar para a branch principal e realizar um git pull para o c√≥digo n√£o ficar desatualizado (e fuder o sistema no processo)
5. Com todos esses passos feitos -> CORRETAMENTE <-, agora pode dar um git merge com a nova branch

E com isso eu espero que sejam todos os passos para n√£o perder seu emprego

As vezes, voc√™ n√£o vai poder bota seu c√≥digo novo diretamente na branch principal, e s√≥ vai poder colocar seu c√≥digo se ele for aprovado por algum outro programador. Neste caso, voc√™ precisa fazer um pull request, para que o programador aprove seu c√≥digo, antes que possa ser incluido no c√≥digo principal.

Como fazer isso voc√™ me pergunta. Ent√£o, eu te explico.

1. Primeiramente, fazer os passos 1-3 do tutorial anterior
2. Ap√≥s isso, voc√™ d√° um git push para enviar o c√≥digo para as nuvens (vai aparecer para voc√™ realizar o comando correto nesse momento, apenas copie e cole e fa√ßa de novo üòâ)
3. (isso aqui √© para github, depois procurar como o da sua empresa faz) Agora voc√™ volta para a p√°gina do githube √© poss√≠vel ver que a branch onde voc√™ enviou o c√≥digo recebeu um push, e o bot√£o grande verde ao lado diz "comparar e fazer um pull request". Clica nese bot√£o verde!
4. Agora, voc√™ define para qual branch voce vai mandar isso, onde est√° escrito base: main, voc√™ define sua branch principal, que, neste caso, √© a branch master.
5. Agora abre um novo ecossistema, onde voc√™ pode dar o nome do pull request e adicionar algum coment√°rio para detalhar melhor o que foi feito no seu novo c√≥digo.
6. Depois de detalhar tudo isso, aperte no grande bot√£o verde escrito "create pull request" e seu c√≥digo ser√° enviado para atualiza√ß√£o.
7. Com isso, seu c√≥digo ser√° aprovado ou reprovado. Caso for aprovado, ele ir√° para a branch principal. Caso ele for recusado, ele receber√° uma explica√ß√£o do motivo da recusa, e voc√™ ir√° ler o motivo, consertar os erros feitos, fazer todas as corre√ß√µes, e dar um novo commit, marcando as pessoas comentaram que seu c√≥digo n√£o estava correto, dizendo que vox√™ fez as altera√ß√µes solicitadas,  sem precisar abrir um novo pull request.








